import logging
import httpx
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, ContextTypes, filters


OMDB_API_KEY = "8750210"
TELEGRAM_TOKEN = "7586998595:AAF7oV-lYaVNFHSdOfQPC1_RPDOwusC5aksdelllk"
OMDB_URL = "http://www.omdbapi.com/"


logging.basicConfig(level=logging.INFO)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É, —ñ —è –∑–Ω–∞–π–¥—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω—å–æ–≥–æ üçø")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    movie_title = update.message.text
    async with httpx.AsyncClient() as client:
        params = {
            "t": movie_title,
            "apikey": OMDB_API_KEY,
            "plot": "short",
            "r": "json"
        }
        response = await client.get(OMDB_URL, params=params)
        data = response.json()

        if data.get("Response") == "False":
            await update.message.reply_text(f"–ù–∞ –∂–∞–ª—å, —Ñ—ñ–ª—å–º '{movie_title}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        else:
            title = data.get("Title", "–ù–µ–≤—ñ–¥–æ–º–æ")
            year = data.get("Year", "–ù–µ–≤—ñ–¥–æ–º–æ")
            plot = data.get("Plot", "–ù–µ–º–∞—î –æ–ø–∏—Å—É")
            rating = data.get("imdbRating", "–ù–µ–º–∞—î")
            genre = data.get("Genre", "–ù–µ–≤—ñ–¥–æ–º–æ")
            poster = data.get("Poster", "")

            message = (
                f"üé¨ <b>{title}</b> ({year})\n"
                f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥ IMDb: {rating}\n"
                f"üé≠ –ñ–∞–Ω—Ä: {genre}\n"
                f"üìù –û–ø–∏—Å: {plot}"
            )

            await update.message.reply_photo(photo=poster, caption=message, parse_mode="HTML")

async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("üé• –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
    await app.run_polling()


if __name__ == "__main__":
    import asyncio
    import nest_asyncio

    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())
